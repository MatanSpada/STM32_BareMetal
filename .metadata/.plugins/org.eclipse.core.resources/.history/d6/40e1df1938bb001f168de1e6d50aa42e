#include "stm32f4xx.h" // for registers
#include "tim.h"

#define TIM2EN					(1U << 0)
#define TIM3EN					(1U << 1)
#define TIMX_CR1_CEN			(1U << 0)
#define TIM2_OUTPUT_CMP_TOGGLE 	(1U << 4) | (1U << 5)
#define CCER_CC1EN			(1U << 0)	// capture/compare enable (CC1EN = bit name)
#define RCC_GPIOA				(1U << 0)
#define AFR5 					(1U << 20)	// alternate function register
#define AFR6 					(1U << 25)	// alternate function register
#define TIMER_MODE_CC1S			(1U << 0)// (CC1S = bit name)

// steps:
	// enable clock for timer2
	// set the prescaler value
	// set the auto-reload value
	// clear counter
	// enable timer

// 1 cycle/event per second
void tim2_1hz_init(void) // chose timer 2 which connected to APB1 BUS
{
	// enable clock for timer2
	RCC->APB1ENR |= TIM2EN;

	// set the prescaler value
	TIM2->PSC = 16000 - 1;

	// set the auto-reload value
	TIM2->ARR = 1000 - 1;

	// clear counter
	TIM2->CNT = 0;

	// enable timer
	TIM2->CR1 |= TIMX_CR1_CEN;

}

// output compare is a mode where we can act on a specific gpio pin,
// wihout writing to, directly like this: GPIOA->ODR ^= LED_PIN (in main).
// It's called "output compare" because the timer's counter value is compared to a preset value,
// and when they match, an output event (e.g., toggle pin, generate interrupt) occurs.
// this means, we just set the timer and the operation we want and set - happen.
// how?
// we need to set the specific gpio pin to an alternate function.
// in our case, we want pin PA5 cause it's connected to the LED.
// so we go the alternate func table and look which AF is for PA5 (p.47 in datasheet) = AF01

void tim2_pa5_output_compare(void) // choose timer 2 which connected to APB1 BUS
{
	// enable clock for GPIOA
	RCC->AHB1ENR |= RCC_GPIOA;

	// set PA5 mode to alternate function (by reference manual, p.158, MODER)
	GPIOA->MODER &= ~(1U << 10);
	GPIOA->MODER |=  (1U << 11);

	// set PA5 to alternate function TYPE
	GPIOA->AFR[0] |= AFR5; // can also be written in a short way with the zero's

	// enable clock for timer2
	RCC->APB1ENR |= TIM2EN;

	// set the prescaler value
	TIM2->PSC = 16000 - 1;

	// set the auto-reload value
	TIM2->ARR = 1000 - 1;

	// enable tim2 ch1 in compare mode
	// go to reference manual, p.298 - CCMR (capture/compare mode register)
	// we're looking for OC1M - output compare 1 mode (1 stands for channel 1).

	// set output compare mode operation
	TIM2->CCMR1 |= TIM2_OUTPUT_CMP_TOGGLE; //(1U << 4) | (1U << 5);
	// or: 	TIM2->CCMR1 |= 0x03 << 4

	// enable tim2 ch1 in compare mode
	TIM2->CCER |= CCER_CC1EN;

	// clear counter
	TIM2->CNT = 0;

	// enable timer
	TIM2->CR1 |= TIMX_CR1_CEN;

}

void tim3_pa6_input_capture(void) // use tim3 to capture the ______ from the above func
{
	// we chose PA6 cause it's connected to tim3

	//enable clock to GPIOA
	RCC->AHB1ENR |= RCC_GPIOA;

	// set PA6 to alternate function mode
	GPIOA->MODER &= ~(1U << 12);
	GPIOA->MODER |=  (1U << 13);

	// set PA6 alternate function TYPE AFO2 (by datasheet p.44)
	GPIOA->AFR[0] |= AFR6;

	// enable clock for tim3
	RCC->APB1ENR |= TIM3EN;

	// config periodic timer values - prescaler
	TIM3->PSC = 1600 - 1;

	// set ch1 to input (capture) mode
	TIM3->CCMR1 |= TIMER_MODE_CC1S;

	// set timer-ch1 mode of the timer as an input capture mode (CCMR1): capture compare mode register ch1 p.299




}
