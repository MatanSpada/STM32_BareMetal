
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000013b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044e  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000016d  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000019a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db9d  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000699  00000000  00000000  0000f5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f8b0  00000000  00000000  0000fc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0005f578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0005f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000394 	.word	0x08000394

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000394 	.word	0x08000394

080001d4 <uart2_tx_init>:

static void UartSetBaudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate);
static uint16_t ComputeUart(uint32_t periph_clock, uint32_t baudrate);

void uart2_tx_init(void) // PA2
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/****** configure UART GPIO pin *******/

	// enable clock to GPIOA (cause PA2 and PA3 are the UART pins)
	RCC->AHB1ENR |= RCC_GPIOAEN;
 80001d8:	4b20      	ldr	r3, [pc, #128]	@ (800025c <uart2_tx_init+0x88>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a1f      	ldr	r2, [pc, #124]	@ (800025c <uart2_tx_init+0x88>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PA2 mode to Alternate function mode
	// by page 157 datasheet, MODER, to set pin 2 in port A to uart, we need to set it to an alternate.
	// by the description, we need to set bit's 4 and 5 in MODER(mode register) (MODER2) to 10.
	GPIOA->MODER &= ~(1U << 4);
 80001e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000260 <uart2_tx_init+0x8c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000260 <uart2_tx_init+0x8c>)
 80001ea:	f023 0310 	bic.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 80001f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000260 <uart2_tx_init+0x8c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000260 <uart2_tx_init+0x8c>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6013      	str	r3, [r2, #0]
	// set PA2 Alternate function type to UART_TX (AF07 - by table 9 in datasheet).
	// by the reference manual on page 161 (8.4.9) we'll choose AFRL2 cause we need PA2.
	// it means we need to change bits: 8-11. to what? according to the alternate function's type,
	// which is: AF7 - as we already know from the prev section - 0111
	// we go to the gpioa resposible register: AF (alternate function) - 0 = low (0-7), 1 = high (8-15)
	GPIOA->AFR[0] |= (1UL << 8);
 80001fc:	4b18      	ldr	r3, [pc, #96]	@ (8000260 <uart2_tx_init+0x8c>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a17      	ldr	r2, [pc, #92]	@ (8000260 <uart2_tx_init+0x8c>)
 8000202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000206:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1UL << 9);
 8000208:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <uart2_tx_init+0x8c>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a14      	ldr	r2, [pc, #80]	@ (8000260 <uart2_tx_init+0x8c>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000212:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1UL << 10);
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <uart2_tx_init+0x8c>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a11      	ldr	r2, [pc, #68]	@ (8000260 <uart2_tx_init+0x8c>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1UL << 11);
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <uart2_tx_init+0x8c>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <uart2_tx_init+0x8c>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6213      	str	r3, [r2, #32]

	/****** configure UART settings *******/
	// enable clock to UART2 (?) to this gpio
	RCC->APB1ENR |= UART2EN;
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <uart2_tx_init+0x88>)
 800022e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000230:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <uart2_tx_init+0x88>)
 8000232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000236:	6413      	str	r3, [r2, #64]	@ 0x40

	// configure baud rate
	UartSetBaudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800023c:	4909      	ldr	r1, [pc, #36]	@ (8000264 <uart2_tx_init+0x90>)
 800023e:	480a      	ldr	r0, [pc, #40]	@ (8000268 <uart2_tx_init+0x94>)
 8000240:	f000 f83f 	bl	80002c2 <UartSetBaudrate>

	// configure transfer direction - with USART_CR1 - control register (why 1?)
	USART2->CR1 = CR1_TE; // = cause we set every other bits to 0 (pairity bit, length...)
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <uart2_tx_init+0x94>)
 8000246:	2208      	movs	r2, #8
 8000248:	60da      	str	r2, [r3, #12]

	// enable UART (?)
	USART2->CR1 |= CR1_UE; // |= cause we add to prev conf.
 800024a:	4b07      	ldr	r3, [pc, #28]	@ (8000268 <uart2_tx_init+0x94>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	@ (8000268 <uart2_tx_init+0x94>)
 8000250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000254:	60d3      	str	r3, [r2, #12]

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	00f42400 	.word	0x00f42400
 8000268:	40004400 	.word	0x40004400

0800026c <uart_write>:

void uart_write(int c)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	/* make sure the transmit data register is empty */
	// we need to wait fot the status register to be empty, so we need to check it
	while(!(USART2->SR & SR1_TXE)) {} // while SR1_TXE is not empty (there's still a set bit)
 8000274:	bf00      	nop
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <uart_write+0x2c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <uart_write+0xa>

	/* write to transmit data register */
	USART2->DR = c & 0xFF; // D1 - data register
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <uart_write+0x2c>)
 8000286:	b2db      	uxtb	r3, r3
 8000288:	6053      	str	r3, [r2, #4]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40004400 	.word	0x40004400

0800029c <ComputeUart>:


static uint16_t ComputeUart(uint32_t periph_clock, uint32_t baudrate)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	085a      	lsrs	r2, r3, #1
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	441a      	add	r2, r3
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	b29b      	uxth	r3, r3
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <UartSetBaudrate>:

static void UartSetBaudrate(USART_TypeDef *USARTx, uint32_t periph_clock, uint32_t baudrate)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b084      	sub	sp, #16
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	60f8      	str	r0, [r7, #12]
 80002ca:	60b9      	str	r1, [r7, #8]
 80002cc:	607a      	str	r2, [r7, #4]
	// BRR - baud rate register
	USARTx->BRR = ComputeUart(periph_clock, baudrate);
 80002ce:	6879      	ldr	r1, [r7, #4]
 80002d0:	68b8      	ldr	r0, [r7, #8]
 80002d2:	f7ff ffe3 	bl	800029c <ComputeUart>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <main>:

int main()
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
	uart2_tx_init();
 80002ea:	f7ff ff73 	bl	80001d4 <uart2_tx_init>

	while(1)
	{
		uart_write('Y');
 80002ee:	2059      	movs	r0, #89	@ 0x59
 80002f0:	f7ff ffbc 	bl	800026c <uart_write>
 80002f4:	e7fb      	b.n	80002ee <main+0x8>
	...

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffdc 	bl	80002e6 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	@ (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	@ (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	@ (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	@ (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
