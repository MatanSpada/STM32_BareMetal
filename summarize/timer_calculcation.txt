1 Hz = 1 cycle per second
10 Hz = 10 cycles per second
100 Hz = 100 cycles per second
1,000 Hz or 1 kHz = 1,000 cycles per second
10,000 Hz or 10 kHz = 10,000 cycles per second
100,000 Hz or 100 kHz = 100,000 cycles per second
1,000,000 Hz or 1,000 kHz or 1 MHz = 1,000,000 cycles per second
10,000,000 Hz or 10,000 kHz or 10 MHz = 10,000,000 cycles per second
100,000,000 Hz or 100,000 kHz or 100 MHz = 100,000,000 cycles per second

update event - when timeout occurs.
period - value reload into auto reload register (like LOAD?)
up/down counter - counts from X to Y, accordinlly,


The Auto-Reload Register (ARR) counts "ticks".
determines the maximum value the timer will count to before it resets.
it doesn't matter the resolution of the ticks, whether it's 16,000,000Hz or 1,000Hz.
STM clock is 16MHz / 16,000,000 Hz - means - 16 milion cycles/ticks per second.
in addition, the register has limited memory (16bit, 65,535).
this means that if i want to create a 1 sec periodic event, i need the arr to count up to 16,000,000.
However, we said that the top-limit of the register is 65,535 - so we have a problem.
the solution is to "minimize" the resolution of the clock. 
how it can be done?
using the prescaler.

we write a value to the prescaler register and it devides the original sys clock freq by this number.
for example, value of 16,000 in the prescaler - will create a single "tick"/pulse every 16,000 original-ticks.
this means, from 16,000,000Hz original ticks we reduced to 16,000,000 / 16,000 = 1000Hz = 1000 "ticks" per sec.
and now...this is a number that can fit the ARR register (even value of 1,600 could work = 16,000,000/1,600 = 10,000).



