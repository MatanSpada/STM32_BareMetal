מיקרוקונטרולר יכול לשרת מספר מודולים במקבלים ע"י שימוש באינטראפטים או פולינג.

אינטראפט:
כשמודול צריך שירות מהמעבד, הוא שולח סיגנל למעבד ע"י 	interrupt.
המעבד עוצר את מה שעשה ומטפל באינטראפט מהמודול.
המודול יכול להיות הפריפריות, לדוגמה, טיימר, ADC, GPIO, וכו'.

פולינג polling
המעבד מנטר בצורה רציפה את הסטטוס של מודול ספציפי.
כשהסטטוס עומד בתנאי של הבדיקה, המעבד מטפל מה שצריך.

דוגמה ל-Polling:

while(1)
{
	...
	if(switch == on)
	getData();
	...
}

דוגמה ל- interrupt:
while(1)
{
	...
}

ומחוץ ל-main ול- main loop, 
קטע קוד נוסף - callback של האינטראפט: interrupt service rutine, או interrupt handler.
אלו בעצם שמות של פונקציה שמתבצעת כאשר יש אינטראפט.

onSwitch_ISR{
getData();
}

היחידה החומריתית שמטפלת באיטרנאפטים היא NVIC - nested vector interrupt controller.
זה בעצם בקר לניהול פסיקות במעבדי ARM Cortex-M.
הוא מנהל את כל האינטראפטים - גם הפנימיים וגם חיצוניים.

אינטראפט שיוצא מהמעבד נקרא exeption.

האינטראפטים עובד בקווים.
ה- GPIO מחוברים למנגנון שנקרא EXTI LINES - external interrupt והמנגנון מטפל רק באינטראפטים שמגיעים מחוץ לשבב המעבד.
פסיקות ממקורות פנימיים (כמו טיימרים, ADC או UART) לא עוברות דרך EXTI אלא מגיעות ישירות ל-NVIC.

EXTI = פסיקות חיצוניות בלבד.
NVIC = מנהל כל הפסיקות (פנימיות וחיצוניות).

פין 0 של כל פורט מחובר ל-EXTI0
פין 1 של כל פורט מחובר ל-EXTI1 וכו'....
בתוך המודול EXTI, יש חלוקה פנימית של הקווים, כך ש:
החל מ- EXTI0 ועד ל- EXTI4 - לכל אחד קו בנפרד, עם שם מתאים, עבור קו 0 לדוגמה זה יהיה : EXTI0_IRQ
הקווים מ- EXTI5 ועד ל- EXTI9 - עוברים דרך קו אחד הנקרא EXTI9_5_IRQ
הקווים מ- EXTI10 ועד ל- EXTI15 - עוברים דרך קו אחד הנקרא EXTI15_10_IRQ

המשמעות היא שלא ניתן להגדיר פינים מאותו EXTI LINE לכיוונים שונים (Input interrupt) במקביל.

המצבים של אינטראפט:
disabled
enabled
pending - מחכה לקבל שירות מהמעבד. האינטראפט הופעל ומחכה לתגובה של המעבד.
active - ה- callback של האינטראפט (ISR) interrupy service routine עכשיו רץ

IRQ Vector Table (טבלת פסיקות) 
מבנה בזיכרון שמכיל את הכתובות של פונקציות השירות (Interrupt Service Routines - ISR).
הטבלה ממוקמת בכתובת ידועה בזיכרון (לרוב בכתובת 0x00000000 במעבדי ARM Cortex-M).
כל ערך בטבלה הוא כתובת של פונקציית ISR או Exception Handler.
ה-IRQ Vector Table היא מפה שמחברת בין אירועים (Interrupts/Exceptions) לפונקציות השירות שמטפלות בהם.
לכל פסיקה יש שם ידוע מראש שהוגדר על ידי הארכיטקטורה או היצרן (כמו EXTI0_IRQHandler).
רק צריך לתת לפונקציה את השם הנכון (למשל EXTI0_IRQHandler), והשיבוץ לטבלה מתבצע אוטומטית על ידי המהדר והלינקר, בהתאם לקובץ ה-startup.

יש פריוריטי לאינטראפטים.
נקבעת לפי IPR - interrupt priority register
יש מספר רגיסטרים כאלה, וכל רגיסטר יכול לטפל ב-4 אינטראפטים.
כלומר, כל IRQ ניתן להגדיר ב-8 ביטים.
לדוגמה, יש לנו 240 סוגים של IRQ (inerrupt request)
לכן, כמות הרגיסטרים הדרושים כדי לטפל בהם היא 240/4 = 60 priority registers.

סוגי priority
אם נדרשים 8 ביטים עבור כל אינטראפט, 
זה מרמז על כך שיש 8^2 = 255 priority levels.

אבל, ב-STM משתמשים רק ב-4 הביטים הגבוהים, 
ולכן 4^2 = 16 priority levels.

רשימת 16 הפריוריטי (רק הביטים הגבוהים)
0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0

highest priority - 0x00
lower priority - 0xF0

כדי למצוא את ה-IPR - interrpt priority level, 
צריך לחלק את המספר של ה-IRQ ב-4. השארית תקבע איזה בייט זה מתוך ה-4 שבתוך הרגיסטר. (?)

ה-FLOW של יצירת אינטראפט (נניח עם כפתור)

1. שינוי במצב המתח של הפין
הכפתור סוגר מעגל חשמלי, וכתוצאה מכך מצב הפין (GPIO) משתנה:
ממתח LOW ל-HIGH (Rising Edge), או להפך (Falling Edge), בהתאם לקונפיגורציה.
2. זיהוי האירוע על ידי EXTI
מודול EXTI מזהה את השינוי במתח, אם הוא תואם לקונפיגורציה (Rising/Falling/Both Edges).
ה-EXTI "מדליק" דגל פסיקה (Interrupt Pending Flag) ברישום המתאים.
3. יצירת בקשת פסיקה (IRQ)
ה-EXTI שולח בקשת פסיקה ל-NVIC (Nested Vectored Interrupt Controller).
ה-NVIC בודק אם הפסיקה:
מותרת (Enabled).
בעלת עדיפות גבוהה מספיק ביחס לפסיקות אחרות.
4. קפיצה ל-ISR (Interrupt Service Routine)
אם הפסיקה מותרת:
ה-NVIC מפסיק את ביצוע הקוד הראשי (אם רץ).
המעבד מבצע "קפיצה" לכתובת של פונקציית ה-ISR, כפי שהיא מוגדרת ב-IRQ Vector Table.
אם יש פסיקה אחרת בעדיפות גבוהה יותר, היא תקבל קדימות.
5. ביצוע קוד ה-ISR
פונקציית השירות (ISR) מטפלת באירוע, לדוגמה:
ניקוי הדגל (Clearing the Pending Flag).
ביצוע פעולות בהתאם לצורך, כמו הדלקת נורית או עדכון משתנה.