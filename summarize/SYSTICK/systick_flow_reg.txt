*** defines ***

#define SYS_CLK			(16000000)
#define MILI_SEC			(0.001) // 1/1000
#define SYSTICK_VAL_MILI		(SYS_CLK * MILI_SEC) // same as 16,000,000 / 1000 = 16,000

// by arm cortex m4 user guide, page.249
#define SYSTICK_EN		(1U << 0)
#define SYSTICK_CLK_SOURCE	(1U << 2) // use internal clock
#define SYSTICK_COUNT_FLAG	(1U << 16) // flag to check if timer finished

*** the flow ***
1.
write into "SysTick->LOAD" the basic time-unit for computing the delay.
in this case it's SYSTICK_VAL_MILI which is = SYS_CLK * MILI_SEC (16,000,000 * 0.001 = 16,000).

2.
clean "count-down timer" bit value to 0.
SysTick->VAL = 0;

3. 
enable systick and select internal clock source
SysTick->CTRL = SYSTICK_EN | SYSTICK_CLK_SOURCE;

4. 
now is the delay loop which works as follows:
each iteration is about 3 cpu-cycles.
this means that a single iteration finishes fast and waits for the count-down.
what is the count-down?
earlier we wrote a basic time-unit into LOAD. the count-down is basically the clock count down starting from the given time to zero.
this mechanism allows us to count-down the exactlly amount of 1 basic time-units we want.
for(int i = 0; i < n; ++i)
{
	// wait untill the count flag is set - means timer's done
	while((SysTick->CTRL & SYSTICK_COUNT_FLAG) == 0) {} // waits for 1 millisecond every time
}
5. 
disable timer
SysTick->CTRL = 0;




